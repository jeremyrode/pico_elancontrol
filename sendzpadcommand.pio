.program sendzpadcommand
.wrap_target
  pull                        ; Can't autopull otherwise !OSRE is never false
  set y, 31                   ; Setup for a command-to-command delay
  intial_delay:
  jmp y-- intial_delay [31]   ; Delay for 31*31 cycles  (64 ms)
  main_loop:
  out y, 1                    ; shift a bit into y
  jmp !y short_skip           ; If short pulse, skip long pulse setup
  set y, 21                   ; Setup for long delay (7.5 ms)
  jmp long_skip               ; Skip over short setup
short_skip:
  set y, 13                   ; Setup for short delay (5 ms)
long_skip:
  set pins, 1                 ; Go high for 1 cycle
  set pins, 0                 ; Go Back Low
delay_loop:
  jmp y-- delay_loop [4]      ; Delay for 5*y cycles (+5 cycles for other code)
  jmp !OSRE main_loop         ; If more bits, do the main loop
.wrap

; this is a raw helper function for use by the user
% c-sdk {
  static inline void sendzpadcommand_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_gpio_init(pio, pin);  // Set this pin's GPIO function (connect PIO to the pad)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true); // Set to output
    pio_sm_config config = sendzpadcommand_program_get_default_config(offset); // Define a config object
    // Use set to toggle the pin
    sm_config_set_set_pins(&config, pin, 1);
    //We have 12 bits per command
    sm_config_set_out_shift(&config, false, false, 12); //Output shift register config
    //                    config, shift_right, Autopull, bits per word
    // sm_config_set_fifo_join(&config, PIO_FIFO_JOIN_TX); //Joins RX&TX FIFOs
    // 8325 / 125 MHz  = 66.6 us clock period
    sm_config_set_clkdiv_int_frac(&config, 8325, 0); // Set clock divider
    pio_sm_init(pio, sm, offset, &config); // Apply the configuration
    pio_sm_set_enabled(pio, sm, true); // Set the state machine running
  }
%}
