.program sendzpadcommand
.wrap_target
  pull block                  ; Need to block here (not at out) when FIFO empty
  set x, 5                    ; Preamble Pulse Counter
preamble:
  set pins, 1                 ; Go high for 1 cycle (12.5 us)
  set pins, 0                 ; Go Back Low
  set y, 15                   ; Base for short (16 x 25 = 400 * 12.5u = 5 ms)
pre_delay_loop:
  jmp y-- pre_delay_loop [24] ; Delay for y x 25 = 400 cycles
  jmp x-- preamble            ; Repeat for 6  pulses
  set x, 5                    ; Done with Preamble, reset Pulse Counter
pulse_loop:
  out y, 1                    ; Pull a shift register bit into y
  jmp !y short_skip           ; If short pulse, skip long pulse setup
  set y, 31                   ; Base for long (25 x 25 = 600 * 12.5u = 7.5 ms)
  jmp long_skip               ; Skip over short setup
short_skip:
  set y, 15                   ; Base for short (16 x 25 = 400 * 12.5u = 5 ms)
long_skip:
  set pins, 1                 ; Go high for 1 cycle (12.5 us)
  set pins, 0                 ; Go Back Low
delay_loop:
  jmp y-- delay_loop [24]     ; Delay for 25*y cycles
  jmp x-- pulse_loop          ; Repeat for 6 pulses
.wrap

; this is a raw helper function for use by the user
% c-sdk {
  static inline void sendzpadcommand_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_gpio_init(pio, pin);  // Set this pin's GPIO function (connect PIO to the pad)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true); // Set to output
    pio_sm_config config = sendzpadcommand_program_get_default_config(offset); // Define a config object
    // Use set to toggle the pin
    sm_config_set_set_pins(&config, pin, 1);
    //We have 6 bits per command, so autopull after 6 bits have been shifted out
    sm_config_set_out_shift(&config, true, false, 6); //Output shift register config
    //                    config, shift_right, Autopull, bits per word
    // sm_config_set_fifo_join(&config, PIO_FIFO_JOIN_TX); //Joins RX&TX FIFOs
    // 125 MHz / 1562 = 80.02 kHz is 12.496 us clock period
    sm_config_set_clkdiv_int_frac(&config,65535,0); // Set clock divider
    pio_sm_init(pio, sm, offset, &config); // Apply the configuration
    pio_sm_set_enabled(pio, sm, true); // Set the state machine running
  }
%}
